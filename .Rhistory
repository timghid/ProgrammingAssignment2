data
data(47,"Ozone")
data(47)
data[47]
data["Ozone"]
data["Ozone",47]
data["Ozone",]
data$Ozone
data$Ozone[47]
data["Ozone"]
complete.cases(data$Ozone)
good<-
complete.cases(data$Ozone)
good
rm good
rm("good")
good
data
good<-data$Ozone
good
rm("good")
good<-complete.cases(data$Ozone)
good
data$Ozone[good]
mean(data$Ozone[good])
data
q18<-data["Ozone">31,"Temp">90]
q18
data
rm("q18")
q18
data
q18<-subset(data,Ozone>31 & Temp>90)
q18
mean(q18$Solar.R)
q19<-subset(data,Month=6)
q19
q19<-subset(data,Month==6)
q19
mean(q19$Temp)
q20<-subset(data,Month==5)
q20
max(q20$Ozone)
help(max)
max(q20$Ozone)
rm("q20")
q20<-complete.cases(subset(data,Month==5))
q20
q20[good]
max(q20)
max(q20$Ozone[good])
mean(data$Ozone[good])
max(q20$ozone[good])
max(q20$ozone)
q20
rm("q20")
q20<-complete.cases(subset(data,Month==5))
q20
q20a<-q20[good]
q20a
mean(data$Ozone[good])
rm("q20","q20a")
history
history()
q20<-subset(data,Month==5)
q20
goodq20<-complete.cases(q20)
goodq20
q20[good]
q20[goodq20]
q20
q20a
goodq20
q20[goodq20]
q20$goodq20
q20
q20[good]
q20[goodq20]
goodq20
data$Ozone[goodq20]
good$Ozone[goodq20]
q20$Ozone[goodq20]
q20
max(q20$Ozone[goodq20])
savehistory("~/Desktop/RProgramming-Quiz1.Rhistory")
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
msSqrt<-sqrt(z-1)
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
mySeq<-seq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
bye()
for (i in 1:10){}
for (i in 1:10){print(i)}
?seq_along
x<-martix(1:6,2,3)
x<-matrix(1:6,2,3)
x
x<-matrix(1:6,2,4)
x<-matrix(1:20,2,4)
x
?matrix
x<-matrix(1:20,2,4,byrow=TRUE)
x
x<-matrix(1:6,2,3)
for (i in seq_len(nrow(x))){}
for (i in seq_len(nrow(x))){for(j in seq_len(ncol(x))){print(x[i,j])}}
?seq_len
while(count<10) {}
while(count<10) { }
while(count<10) { }
while(count<10) { }
while(count<10) { }
}
}
z<-5
while(z>=3 && x<=10){
z<-5
while(z>=3 && x<=10){
print(z)
coin<-rbinom(1,1,0.5)
if(coin==1) {
x<-z+1
}else{
z<-z-1
}
}
q()
quit
exit
bye()
end
}else{
z<-z+1
z<-5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if(coin==1) {
z<-z+1
}else{
z<-z-1
}
}
z<-5
while(z>=3 && z<=10){
print(z)
coin<-rbinom(1,1,0.5)
if(coin==1) {
z<-z+1
}else{
z<-z-1
}
}
?formals
formals(matrix())
formals(matrix)
formals(sd)
?sd
?formals
args(lm)
args(matrix)
args(paste)
args(c)
args(cat)
?cat
cat("1234","asdf")
paste("a","b",se="i")
se
swirl()
library(swirl)
swirl()
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","Name","is")
my_char<-("My","Name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Dave")
my_name
paste(my_char,my_name,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
3x
x * x
3* x
y<-rnorm(1000)
z<-rep(NA,1000)
myData <- sample(c(y,z),100)
myNA<-is.na(myData)
myNA
myData ==NA
sum(myNA)
myData
0/0
inf-inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector[1:20]
myVector<-[1:20]
myVector<-(1:20)
myVector<-c(1:20)
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2<-matrix(1:20,4,5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient",age","weight","bp","rating","test"")
cnames<-c("patient","age","weight","bp","rating","test"")
q
cnames<-c("patient","age","weight","bp","rating","test"")
q
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames,myData)
colnames(myData)<-cnames
myData
x<-Sys.time()
x
p<-as.POSIXlt(x)
names(unclass(p))
p
p$wday
p$mon
p$mday
p$yday
p$mon
?strptime
p
p$sec
p$min
p$hour
p$mday
p$mon
p$year
p$wday
p$isdst
?DateTimeClasses
?lm
help.start(lm)
help(lm)
args(lm)
args(rnorm)
?args
x<-c("a","b","c")
s
x
seq_along(x)
?seq_along
seq_len(x)
y<-(1,2,3,4)
y<-c(1,2,3,4)
seq_len(y)
seq_len(1:5)
seq_len(7)
time()
dte()
date()
date-time()
date-time(date())
date()
summary(date())
search()
z<-date()
z["yday"]
z
z[1]
class(z)
attributes(z)
dim(z)
dims(z)
months()
d<-date()
d
len(d)
length(d)
date()
z<-as.POSIXlt(date())
date
now()
now
xct
ls
ls(environment(corr))
xct<-date()
xct
as.POSIXlt(xct)
as.POSIXlt(Sys.time(), "EST" )
as.POSIXlt(Sys.time())
xct<-as.POSIXlt(Sys.time())
colnames(xct)
xct
xct$year
xct$mon
2014-114
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x<-5
}
NA
y
x<-list(a=1:5,b=rnorm(10))
lapply(x,mean)
?lapply
?rnorm
?runif
runif(1:4)
runif(1)
runif(7)
x<-1:4
lapply(x,runif)
?elt
x<-matrix(1:9,3,3)
x
x[,1]
x[1]
x[1,]
x<-list(a=1:4,b=norm(10),c=rnorm(20,1),d=rnorm(100,5))
x<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
x
lapply(x,mean)
sapply(x,mean)
bb<-sapply(x,mean)
bb
bb$a
bb['a']
bb['c']
bb[3]
x<-list(a=1:4,b=norm(10),c=rnorm(20,1),d=rnorm(100,5))
lapply(x,mean)
x<-list(a=1:4,b=rnorm(10),c=rnorm(20,1),d=rnorm(100,5))
x<-matrix(rnorm(200),20,10)
x
apply(x,2,mean)
?rowsums
?rowsum
?colsum
?rowmean
?rowmeans
range
x<-c(1,2,5,6,9,10)
x
gl(x,3)
y<-gl(3,2)
y
tapply(x,y,range)
tapply(x,y,mean)
tapply(x,y,mean,simplify=TRUE)
tapply(x,y,range,simplify=TRUE)
zero
getwd()
setwd("~/Documents/My Documents/dave/MyTraining/DataScienceCourses/GIT_Repository/datasciencecoursera/R_Programming")
setwd("~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2")
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/makeVector.R', echo=TRUE)
}
makevector(c(2,3,4))
makeVector(c(2,3,4))
?matrix
x<-matrix(1:9,3,3)
x
nrow(x)
ncol(x)
nrow(1)
nrow(x$1)
x(1)
x(,1)
x[,1]
x[1,]
x[1,2]
x[2,2]
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(1:6,3,3)
makeCacheMatrix(1:9,3,3)
makeCacheMatrix()
nrow(x)
x
ncol(x)
col(x)
?col
y<-matrix(1:9,3,3)
makeCacheMatrix(y)
nrow(x)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(y)
nrow(x)
ncol(x)
x
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(y)
z<-matrix(1:6,2,3)
makeCacheMatrix(z)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(z)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(z)
makeCacheMatrix(z)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(z)
makeCacheMatrix(y)
makeCacheMatrix(y)
debugSource('~/Documents/My Documents/dave/MyTraining/DataScienceCourses/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(y)
y
z
solve(y)
?solve
solve(z)
zz<-matrix(rnorm(20,4))
zz
zz<-matrix(rnorm(20),4
Q
zz<-matrix(rnorm(20),4)
zz
solve(zz)
zz<-matrix(rnorm(16),4,4)
zz
solve(zz)
